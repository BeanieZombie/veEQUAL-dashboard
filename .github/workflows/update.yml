name: Update veEQUAL Data & Deploy API

on:
  schedule:
    # Run daily at 00:33 UTC
    - cron: 33 0 * * *
  push:
    branches:
      - main
      - fix/**
      - feature/**
  workflow_dispatch:

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Bun with Fallback
      run: |
        echo "=== Setting up Bun ==="
        # Try using the action first, then fallback to direct install
        if ! command -v bun &> /dev/null; then
          echo "Bun not found, installing directly..."
          curl -fsSL https://bun.sh/install | bash
          export BUN_INSTALL="$HOME/.bun"
          export PATH="$BUN_INSTALL/bin:$PATH"
          echo "$BUN_INSTALL/bin" >> $GITHUB_PATH
        fi
        bun --version
        echo "✅ Bun setup completed"

    - name: Install Build Tools
      run: |
        echo "=== Installing Build Tools ==="
        sudo apt-get update
        # Ensure build-essential, python3, make, g++, cmake, and node-gyp are installed
        sudo apt-get install -y build-essential python3 python3-dev make g++ cmake
        # Install node-gyp globally for native module compilation
        npm install -g node-gyp
        echo "✅ Build tools installed successfully"

    - name: Configure Bun Cache
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install project dependencies
      run: |
        echo "=== Installing Project Dependencies ==="
        # Ensure we have the latest package list
        bun install --verbose
        
        # Verify DuckDB installation specifically
        echo "Verifying DuckDB installation..."
        if ! bun -e "require('duckdb')" 2>/dev/null; then
          echo "DuckDB not found, installing separately..."
          npm install duckdb --build-from-source
        fi
        echo "✅ Dependencies installation completed"

    - name: Verify DuckDB Installation
      run: |
        echo "=== DuckDB Verification ==="
        echo "Checking DuckDB installation..."
        bun -e "
        try {
          const duckdb = require('duckdb');
          console.log('✅ DuckDB module loaded successfully');
          const db = new duckdb.Database(':memory:');
          console.log('✅ DuckDB database created successfully');
          db.close();
        } catch(err) {
          console.error('❌ DuckDB verification failed:', err.message);
          process.exit(1);
        }
        "
        echo "✅ DuckDB verification completed"

    - name: Create data directory
      run: |
        echo "=== Creating Data Directory ==="
        mkdir -p data
        echo "✅ Data directory created"

    - name: Run data pipeline with retry logic
      run: |
        # Retry mechanism to handle potential network or runtime issues
        export NODE_ENV=production
        export SONIC_RPC=https://sonic-rpc.publicnode.com
        
        for i in {1..3}; do
          echo "=== Data pipeline attempt $i/3 ==="
          if timeout 30m bun run update; then
            echo "✅ Pipeline completed successfully on attempt $i"
            break
          else
            exit_code=$?
            echo "❌ Attempt $i failed with exit code $exit_code"
            
            # Show some debugging info
            echo "Current directory contents:"
            ls -la
            echo "Data directory contents:"
            ls -la data/ 2>/dev/null || echo "Data directory not found"
            
            if [ $i -eq 3 ]; then
              echo "❌ Data pipeline failed after 3 attempts"
              exit 1
            fi
            echo "Retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        # Verify the output files exist
        echo "=== Verifying pipeline outputs ==="
        if [ -f "data/veEqual.duckdb" ]; then
          echo "✅ Database file created: $(ls -lh data/veEqual.duckdb)"
        else
          echo "❌ Database file missing"
          exit 1
        fi
        
        if [ -f "veEQUAL.md" ]; then
          echo "✅ Markdown report created: $(ls -lh veEQUAL.md)"
        else
          echo "❌ Markdown report missing"
          exit 1
        fi
        
        echo "✅ Data pipeline completed successfully"
      timeout-minutes: 40
      env:
        NODE_ENV: production
        SONIC_RPC: https://sonic-rpc.publicnode.com

    - name: Debug Environment
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "Node version: $(node --version)"
        echo "Bun version: $(bun --version)"
        echo "npm version: $(npm --version)"
        echo "Python version: $(python3 --version)"
        echo "Working directory: $(pwd)"
        echo "Environment variables:"
        env | grep -E "(NODE|BUN|PATH)" | sort
        echo "=== File System ==="
        ls -la
        echo "=== Node Modules ==="
        ls -la node_modules/ | head -20
        echo "=== DuckDB ==="
        ls -la node_modules/duckdb/ 2>/dev/null || echo "DuckDB not found"
        echo "=== Recent logs ==="
        tail -50 /tmp/* 2>/dev/null | head -100 || echo "No logs found"

    - name: Verify data integrity
      run: |
        # Check if essential data files were created
        if [ ! -f "data/veEqual.duckdb" ]; then
          echo "Error: Database file not created"
          exit 1
        fi
        if [ ! -f "veEQUAL.md" ]; then
          echo "Error: Markdown report not created"
          exit 1
        fi
        echo "Data integrity check passed"

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit updated data
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "feat: automated data update $(date -u '+%Y-%m-%d %H:%M UTC')"
        git push

    - name: Setup Pages
      if: success()
      uses: actions/configure-pages@v4
      continue-on-error: true

    - name: Setup Ruby for Jekyll
      if: success()
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
      continue-on-error: true

    - name: Create Gemfile if not exists
      if: success()
      run: |
        if [ ! -f "Gemfile" ]; then
          echo "Creating Gemfile for Jekyll..."
          cat > Gemfile << 'EOF'
        source "https://rubygems.org"
        gem "github-pages", group: :jekyll_plugins
        gem "jekyll-feed", "~> 0.12"
        gem "minima", "~> 2.5"
        EOF
        fi
      continue-on-error: true

    - name: Build Jekyll site
      if: success()
      run: |
        # Install Jekyll dependencies
        bundle install
        # Build the Jekyll site
        bundle exec jekyll build --destination ./_site
        echo "✅ Jekyll site built successfully"
      continue-on-error: true

    - name: Upload to Pages
      if: success()
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./_site
      continue-on-error: true

    - name: Deploy to GitHub Pages
      if: success()
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: true

    - name: Pages Deployment Status
      run: |
        if [ "${{ steps.deployment.outcome }}" = "success" ]; then
          echo "✅ GitHub Pages deployed successfully"
        else
          echo "⚠️ GitHub Pages deployment failed - check if Pages is enabled in repository settings"
          echo "Go to: https://github.com/BeanieZombie/veEQUAL-dashboard/settings/pages"
          echo "Set Source to: GitHub Actions"
        fi
